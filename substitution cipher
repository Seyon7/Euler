def getting_data():
    """Введите 4 строки: первые две - одинаковой длинны"""
    while True:
        original_data = input()
        encrypted_original_data = input()
        if len(original_data) == len(encrypted_original_data):
            break
    str_to_encrypt = input()
    str_to_decipher = input()
    return [original_data, encrypted_original_data, str_to_encrypt, str_to_decipher]


def creating_alphabetical_dictionary(dataset: list):
    """Создает словарь соответствий букв, например: а = в, в = к и т. д."""
    alphabetical_dictionary = {}
    for i in range(len(data[0])):
        alphabetical_dictionary[data[0][i]] = data[1][i]
    return alphabetical_dictionary


def encryption(dic: dict, content: str):
    """Берет символы строки и сравниваеьт с ключами, если совпажает, то вместо символа
    строки подставляеться символ из словаря по ключу"""

    content = [i for i in content]
    for i in range(len(content)):
        if content[i] in dic.keys():
            content[i] = dic[content[i]]
    encrypted_string = ''
    for el in content:
        encrypted_string += el
    return encrypted_string


def decryption(dic: dict, content: str):
    """Берет символы строки и сравниваеьт с значениями словаря, если совпажает, то вместо символа
        строки подставляеться ключ, значение которого совпало"""

    content = [i for i in content]
    for i in range(len(content)):
        for k, v in dic.items():
            if v == content[i]:
                content[i] = k
                break
    decrypted_string = ''
    for el in content:
        decrypted_string += el
    return decrypted_string


data = getting_data()
dictionary = creating_alphabetical_dictionary(data)
encrypted_str = encryption(dictionary, data[2])
decrypted_str = decryption(dictionary, data[3])
print(encrypted_str)
print(decrypted_str)
